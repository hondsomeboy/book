# -*- coding: utf-8 -*-
"""作業.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZtC5HDSpnt-za2-SL8mB3PIC_VIv1eu7
"""

ch05 = "/content/drive/MyDrive/影像辨識"

from google.colab.patches import cv2_imshow

from google.colab import drive
import pandas as pd
drive.mount('/content/drive')

from google.colab import drive
from google.colab.patches import cv2_imshow
import cv2, numpy,os,shutil
from time import sleep
from PIL import Image, ImageDraw, ImageFont


def mkdirs(path):
     if os.path.isfile(path):
            raise Exception("路徑已存在")
     if not os.path.exists(path):
            os.makedirs(path)
            return path
     import shutil
from time import sleep

def emptydir(dirname):
     if os.path.isdir(dirname):
              shutil.rmtree(dirname)
              sleep(2)
              os.mkdir(dirname)

ch05 = "/content/drive/MyDrive/影像辨識"
!mkdir {ch05}/newimg

import PIL
from PIL import Image
import glob
import os


def dirResize(src,dst,a):
  myfiles=glob.glob(src+'/*.jpg')
  myfiles=sorted(myfiles)
  print("開始轉換!")
  for i,f in enumerate(myfiles):
    img=Image.open(f)
    img1=img.resize((416,416),PIL.Image.ANTIALIAS)
    outname=a+f.split('/')[-1]
    img1.save(dst+'/'+outname)
  print('轉換完成!\n')


dirResize(f'/content/drive/MyDrive/影像辨識/buffalo',f'/content/drive/MyDrive/影像辨識/newimg','buffalo')
dirResize(f'/content/drive/MyDrive/影像辨識/elephant',f'/content/drive/MyDrive/影像辨識/newimg','elephant')
dirResize(f'/content/drive/MyDrive/影像辨識/rhino',f'/content/drive/MyDrive/影像辨識/newimg','rhino')
dirResize(f'/content/drive/MyDrive/影像辨識/zebra',f'/content/drive/MyDrive/影像辨識/newimg','zebra')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

import PIL
from PIL import Image,ImageDraw, ImageFont
import glob
import os,shutil
from google.colab import drive
from google.colab.patches import cv2_imshow
import cv2, numpy,os,shutil
from time import sleep
from os import mkdir
mkdir('./yolodata')
def Yolodata(src,src2,s):
        imgfiles=glob.glob(src2+'/*.jpg')

        for fimg in imgfiles:
           fname=fimg.split('/')[-1]
           shutil.copyfile(fimg,'./yolodata/'+fname)

           myfiles=glob.glob(src+'/*.txt')
           myfiles=sorted(myfiles)
        print("開始重新命名!")
        for flb in myfiles:
           fyolo=open(flb)#
           out=fyolo.read()
           fname="./yolodata/"+s+flb.split('/')[-1]
           ftxt=open(fname,'w')
           ftxt.write(out)
        print('完成!\n')



Yolodata(f'/content/drive/MyDrive/影像辨識/buffalo',f'/content/drive/MyDrive/影像辨識/newimg','buffalo')
Yolodata(f'/content/drive/MyDrive/影像辨識/elephant',f'/content/drive/MyDrive/影像辨識/newimg','elephant')
Yolodata(f'/content/drive/MyDrive/影像辨識/rhino',f'/content/drive/MyDrive/影像辨識/newimg','rhino')
Yolodata(f'/content/drive/MyDrive/影像辨識/zebra',f'/content/drive/MyDrive/影像辨識/newimg','zebra')

ch05 = "/content/drive/MyDrive/影像辨識"
!mkdir {ch05}/期末報告

yolo_dir = "/content/drive/MyDrive/影像辨識/期末報告"
!mkdir {yolo_dir}/zip

!zip -r yolodata.zip ./yolodata
!cp yolodata.zip {yolo_dir}/zip

#5.3.4
import glob
import os, shutil
from time import sleep
import random
from google.colab import drive
from os import mkdir

batch = 24
subdivisions = 3
classname = ['buffalo', 'elephant', 'rhino','zebra']
train = 'cfg/train.txt'
valid = 'cfg/valid.txt'
names = 'cfg/obj.names'
backup = 'cfg/weights'
validratio = 0.1

print('開始建立設定資料!(第一次執行會較久,請耐心等候!)')

mkdir("./cfg")
mkdir("./"+ backup)


classes = len(classname)
f = open('./cfg/obj.data', 'w')
out = 'classes = ' + str(classes) + '\n'
out +='train = ' + train + '\n'
out +='valid = ' + valid + '\n'
out +='names = ' + names + '\n'
out +='backup = ' + backup + '\n'

f.write(out)
#標籤
f = open(names, 'w')
out =''
for cla in classname:
        out += cla + '\n'
f.write(out)
#訓練
imgfiles=glob.glob('./yolodata/*.jpg')
for i in range(len(imgfiles)):
  imgfiles[i]=imgfiles[i].replace('\\','/')
validnum=int(len(imgfiles) * validratio)
validlist = random.sample(imgfiles, validnum)
f=open(valid,'w')
out=''

for val in validlist:

  filename=val.split("/")[-1]
  out+=f"/content/yolodata/{filename}\n"
f.write(out)

f=open(train,'w')
out=''
for tra in imgfiles:
  if tra not in validlist:

    filename=tra.split("/")[-1]
    out+=f"/content/yolodata/{filename}\n"
f.write(out)


for tra in imgfiles:
  if tra not in validlist:

    filename=tra.split("/")[-1]
    out+=f"/content/yolodata/{filename}\n"
f.write(out)
#組態
cfglist = ['yolov3-tiny-obj.cfg', 'yolov3-obj.cfg']
for cfgfile in cfglist:
        shutil.copyfile(f"{ch05}/{cfgfile}", './cfg/' + cfgfile)
        f = open('./cfg/' + cfgfile, 'r')
        content = f.read()
        content = content.replace('[[batch]]', str(batch))
        content = content.replace('[[subdivisions]]', str(subdivisions))
        content = content.replace('[[classes]]', str(classes))
        content = content.replace('[[filters]]', str((classes+5)*3))
        f = open('./cfg/' + cfgfile, 'w')
        f.write(content)

f.close()
print('建立設定資料完成!')

!cp -R ./cfg {yolo_dir}/cfg

!wget -O darknet.zip https://github.com/AlexeyAB/darknet/archive/refs/heads/master.zip

!cp darknet.zip {yolo_dir}/zip

!unzip darknet.zip
!mv darknet-master darknet-gpu

# Commented out IPython magic to ensure Python compatibility.
# %cd darknet-gpu

!sed -i "s/GPU=0/GPU=1/g" Makefile
!sed -i "s/CUDNN=0/CUDNN=1/g" Makefile
!sed -i "s/OPENCV=0/OPENCV=1/g" Makefile
!cat Makefile -n

!make

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
!zip -r darknet-gpu.zip ./darknet-gpu
!cp darknet-gpu.zip {yolo_dir}/zip

yolo_dir = "/content/drive/MyDrive/影像辨識/期末報告"
xpu="gpu"

!unzip darknet.zip
!mv darknet-master darknet-cpu

# Commented out IPython magic to ensure Python compatibility.
# %cd darknet-cpu

#!sed -i "s/GPU=0/GPU=1/g" Makefile
#!sed -i "s/CUDNN=0/CUDNN=1/g" Makefile
!sed -i "s/OPENCV=0/OPENCV=1/g" Makefile
!cat Makefile -n

!make

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
!zip -r darknet-cpu.zip ./darknet-cpu
!cp darknet-cpu.zip {yolo_dir}/zip

yolo_dir = "/content/drive/MyDrive/影像辨識/期末報告"
xpu="cpu"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
!unzip {yolo_dir}/zip/yolodata.zip
!unzip {yolo_dir}/zip/darknet-{xpu}.zip

# Commented out IPython magic to ensure Python compatibility.
# %cd {yolo_dir}
!/content/darknet-{xpu}/darknet detector train \
  cfg/obj.data \
  cfg/yolov3-tiny-obj.cfg \
  -dont_show -gpus 0 -map

# Commented out IPython magic to ensure Python compatibility.
# %cd {yolo_dir}
!/content/darknet-cpu/darknet detector map \
  cfg/obj.data \
  cfg/yolov3-tiny-obj.cfg \
  cfg/weights/yolov3-tiny-obj_best.weights \

# Commented out IPython magic to ensure Python compatibility.
# %cd {yolo_dir}
!/content/darknet-{xpu}/darknet detector map \
 cfg/obj.data \
 cfg/yolov3-tiny-obj.cfg \
 cfg/weights/yolov3-tiny-obj_last.weights

ch06='/content/drive/MyDrive/影像辨識/newimg'
xpu = "gpu"

# Commented out IPython magic to ensure Python compatibility.
# %pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd {yolo_dir}
!/content/darknet-{xpu}/darknet detector test \
 cfg/obj.data \
 cfg/yolov3-tiny-obj.cfg \
 cfg/weights/yolov3-tiny-obj_best.weights \
 -ext_output \
 {ch06}/zebra066.jpg

ch06 = "/content/drive/MyDrive/影像辨識"
from google.colab.patches import cv2_imshow

yolo_dir = "/content/drive/MyDrive/影像辨識/期末報告"
xpu='cpu'

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
!unzip {yolo_dir}/zip/yolodata.zip
!unzip {yolo_dir}/zip/darknet-{xpu}.zip

import cv2
import numpy as np
net = cv2.dnn.readNetFromDarknet(
    f"{yolo_dir}/cfg/yolov3-tiny-obj.cfg",
    f"{yolo_dir}/cfg/weights/yolov3-tiny-obj_best.weights" )
layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]
classes = [line.strip() for line in open(f"{yolo_dir}/cfg/obj.names")]
colors = [(0,0,255), (255,0,0), (0,255,0), (0 , 150, 255)]

img = cv2.imread(f"{ch06}/newimg/rhino123.jpg")
img = cv2.resize(img,None, fx=0.4, fy=0.4)
height, width, channels = img.shape
blob = cv2.dnn.blobFromImage(img, 1/255.0, (416, 416), (0, 0, 0), True, crop = False)
net.setInput(blob)

outs = net.forward(output_layers)
class_ids =[]
confidences = []
boxes = []
for out in outs:
   for detection in out:
       tx, ty, tw, th, confidence = detection[0:5]
       scores = detection[5:]
       class_id = np.argmax(scores)
       if confidence >0.3:
           conter_x = int(tx * width)
           conter_y = int(ty * height)
           w = int(tw * width)
           h = int(th * height)
           x = int(conter_x - w / 2)
           y = int(conter_y - h / 2)
           boxes.append([x, y, w, h])
           confidences.append(float(confidence))
           class_ids.append(class_id)
indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.3, 0.4)
font = cv2.FONT_HERSHEY_PLAIN
for i in range(len(boxes)):
   if i in indexes:
        x, y, w, h = boxes[i]
        label = str(classes[class_ids[i]])
        color = colors[class_ids[i]]
        cv2.rectangle(img, (x, y), (x + w, y + h), color, 1)
        cv2.putText(img, label, (x, y -5), font, 1, color, 1)
print("win")
cv2_imshow(img)
